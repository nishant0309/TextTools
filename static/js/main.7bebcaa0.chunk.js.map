{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleMode","role","htmlFor","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","setText","Fragment","style","color","heading","value","onChange","event","target","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","split","join","length","Alert","alert","word","lower","charAt","slice","capitalize","msg","data-bs-dismiss","App","setmode","_useState3","_useState4","setAlert","message","setTimeout","document","body","aboutText","components_Alert","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.7bebcaa0.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n    <div className=\"container-fluid\">\r\n      <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n      <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n        <span className=\"navbar-toggler-icon\"></span>\r\n      </button>\r\n      <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n          <li className=\"nav-item\">\r\n            <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n          </li>\r\n          {/* <li className=\"nav-item\">\r\n            <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n          </li> */}\r\n          \r\n        </ul>\r\n        <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n            <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n             <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </nav>\r\n  )\r\n}\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    aboutText: PropTypes.string.isRequired\r\n}\r\n","import React,{useState} from 'react'\r\n\r\n\r\nexport default function TextForm(props) {\r\n\r\n    // const handleCopy=()=>{\r\n    //     document.getElementById(\"myBox\");\r\n    //     text.select();\r\n    //     text.setSelectionRange(0,9999);\r\n    //     navigator.clipboard.writeText(text.value);\r\n    //     props.showAlert(\"copied to clipboard!\",\"success\")\r\n    // }\r\n    const handleExtraSpace= ()=>{\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"))\r\n        props.showAlert(\"extra spaces removed!\",\"success\")\r\n    }\r\n\r\n    const handleUpClick= ()=>{\r\n        \r\n        setText(\"You have clicked on handleUpClick\")\r\n        let newText = text.toUpperCase()\r\n        setText(newText)\r\n        props.showAlert(\"converted to uppercase!\",\"success\")\r\n\r\n    }\r\n    const handleLoClick= ()=>{\r\n        \r\n        setText(\"You have clicked on handleUpClick\")\r\n        let newText = text.toLowerCase()\r\n        setText(newText)\r\n        props.showAlert(\"converted to lowercase!\",\"success\")\r\n\r\n    }\r\n    const handleClearClick= ()=>{\r\n        \r\n        setText(\"You have clicked on handleUpClick\")\r\n        let newText = \"\"\r\n        setText(newText)\r\n        props.showAlert(\"text cleared!\",\"success\")\r\n\r\n    }\r\n    const handleOnChange= (event)=>{\r\n        \r\n        setText(event.target.value)\r\n\r\n    }\r\n\r\n    const [text,setText] = useState('');\r\n\r\n  return (\r\n    <>\r\n    <div className=\"container\" style={{color: props.mode==='dark'?'white':'black'}}>\r\n        <h1>{props.heading}</h1>\r\n<div className=\"mb-3\">\r\n  \r\n\r\n  <textarea className=\"form-control\"value={text} onChange={handleOnChange}  style={{color: props.mode==='dark'?'white':'black', backgroundColor: props.mode==='dark'?'#404040':'white'}} id=\"myBox\" rows=\"10\"></textarea>\r\n</div>\r\n<button className=\"btn btn-primary mx-1\"onClick={handleUpClick}>Convert To Uppercase</button>\r\n<button className=\"btn btn-primary mx-1\"onClick={handleLoClick}>Convert To Lowercase</button>\r\n<button className=\"btn btn-primary mx-1\"onClick={handleClearClick}>Clear Text</button>\r\n{/* <button className=\"btn btn-primary mx-1\"onClick={handleCopy}>Copy Text</button> */}\r\n<button className=\"btn btn-primary mx-1\"onClick={handleExtraSpace}>Remove Extra Space</button>\r\n\r\n</div>\r\n <div className=\"container my-3\" style={{color: props.mode==='dark'?'white':'black'}}>\r\n    <h2>Your text summary</h2>\r\n    <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n    <p>{0.008*text.split(\" \").length}Minutes read</p>\r\n    <h2>Preview</h2>\r\n    <p>{text.length>0?text:\"Enter something in the to preview it here\"}</p>\r\n</div>\r\n</>\r\n\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize=(word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase()+lower.slice(1);\r\n\r\n    }\r\n  return (\r\n   props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n        <strong>{capitalize(props.alert.type)}</strong>:{props.alert.msg}\r\n        <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\r\n</div>\r\n  )\r\n}\r\n\r\nexport default Alert","\nimport './App.css';\nimport About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React,{useState} from 'react'\nimport Alert from './components/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n//   Link\n// } from \"react-router-dom\";\n\n\n\nfunction App() {\n  const [mode, setmode] = useState('light');\n  const [alert, setAlert] = useState(null)\n  const showAlert=(message,type)=>{\n    setAlert({\n      msg:message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null)\n    }, 1500);\n  }\n  const toggleMode=()=>{\n    if(mode==='light'){\n      setmode('dark');\n      document.body.style.backgroundColor='\t#042743'\n      showAlert(\"Dark Mode has been enabled\",\"success\")\n    }\n    else{\n      setmode('light');\n      document.body.style.backgroundColor='white'\n      showAlert(\"Light Mode has been enabled\",\"success\")\n    }\n\n  }\n  return (\n    <>\n    \n   <Navbar title=\"TextTools\" mode = {mode} toggleMode={toggleMode} aboutText = \"About\"/>\n   <Alert alert ={alert}/>\n   <div className = \"container my-3\"><TextForm showAlert={showAlert} heading = \"Enter the text to analyze below\" mode = {mode}/>\n   {/*<Router>\n    <Switch>\n          <Route exact path=\"/About\">\n            <About />\n          </Route>\n          \n          <Route exact path=\"/\">\n          <TextForm showAlert={showAlert} heading = \"Enter the text to analyze below\" mode = {mode}/>\n          </Route>\n        </Switch>\n        </Router> */}\n    </div>\n    \n    \n   \n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}